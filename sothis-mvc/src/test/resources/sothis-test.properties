#除了sothis.beanFactory.class是通过Class.newInstance()方法实例化，其他的所有class都是通过bean factory注入的
#比如说你使用了spring，那么你可以向任何一个class注入你在spring中预先声明的任何bean


#bean factory所使用的class，必须实现org.sothis.core.beans.BeanFactory接口或org.sothis.web.mvc.ServletBeanFactory接口
sothis.beanFactory.class=org.sothis.core.beans.SimpleBeanFactory

#sothis.viewResolver.class=org.sothis.web.mvc.DefaultModelAndViewResolver
#sothis.actionMapper.class=org.sothis.web.mvc.DefaultActionMapper
#sothis.flash.class=org.sothis.web.mvc.DefaultFlash




#interceptors
#sothis.interceptors.${interceptorName}.class=some.qualified.ClassName
#sothis.interceptors.params.class=org.sothis.web.mvc.interceptors.ParametersInterceptor
#sothis.interceptors.upload.class=org.sothis.web.mvc.interceptors.FileUploadInterceptor
#sothis.interceptors.myInterceptorName.class=org.sothis.web.mvc.interceptors.MyInterceptor

#interceptor stacks, sothis.interceptors.stack.${stackName}=interceptorName1[,interceptorName2]...
#default stack
#sothis.interceptors.stack.default=upload,params
#mystack
#sothis.interceptors.stack.mystack=params,myInterceptorName




#views
#sothis.views.${viewName}.class=some.qualified.ClassName
sothis.views.mock.class=org.sothis.mvc.MockView

#default view name
sothis.views.default=mock





#comma seperated controller packages
sothis.controller.packages=org.sothis.mvc.controllers
sothis.controller.initializeOnStartup=true